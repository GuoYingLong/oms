// Code generated by 'yaegi extract github.com/ssbeatty/oms/pkg/transport'. DO NOT EDIT.

package symbols

import (
	"github.com/ssbeatty/oms/pkg/transport"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/ssbeatty/oms/pkg/transport/transport"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ArchAmd64":               reflect.ValueOf(constant.MakeFromLiteral("\"amd64\"", token.STRING, 0)),
		"ArchArm":                 reflect.ValueOf(constant.MakeFromLiteral("\"arm\"", token.STRING, 0)),
		"ArchI386":                reflect.ValueOf(constant.MakeFromLiteral("\"386\"", token.STRING, 0)),
		"ArchUnknown":             reflect.ValueOf(constant.MakeFromLiteral("\"unknown\"", token.STRING, 0)),
		"AuthWithAgent":           reflect.ValueOf(transport.AuthWithAgent),
		"AuthWithPrivateKeyBytes": reflect.ValueOf(transport.AuthWithPrivateKeyBytes),
		"CmiTimeLayout":           reflect.ValueOf(constant.MakeFromLiteral("\"20060102150405.999999\"", token.STRING, 0)),
		"DefaultPtyCols":          reflect.ValueOf(constant.MakeFromLiteral("200", token.INT, 0)),
		"DefaultPtyRows":          reflect.ValueOf(constant.MakeFromLiteral("40", token.INT, 0)),
		"DefaultRWTimeoutSec":     reflect.ValueOf(&transport.DefaultRWTimeoutSec).Elem(),
		"DefaultTimeoutSec":       reflect.ValueOf(&transport.DefaultTimeoutSec).Elem(),
		"Dial":                    reflect.ValueOf(transport.Dial),
		"GOOSDarwin":              reflect.ValueOf(constant.MakeFromLiteral("\"darwin\"", token.STRING, 0)),
		"GOOSFreeBSD":             reflect.ValueOf(constant.MakeFromLiteral("\"freebsd\"", token.STRING, 0)),
		"GOOSLinux":               reflect.ValueOf(constant.MakeFromLiteral("\"linux\"", token.STRING, 0)),
		"GOOSUnknown":             reflect.ValueOf(constant.MakeFromLiteral("\"unknown\"", token.STRING, 0)),
		"GOOSWindows":             reflect.ValueOf(constant.MakeFromLiteral("\"windows\"", token.STRING, 0)),
		"GetAllStats":             reflect.ValueOf(transport.GetAllStats),
		"KeepAliveMessage":        reflect.ValueOf(constant.MakeFromLiteral("\"keepalive@golang.org\"", token.STRING, 0)),
		"KillSignal":              reflect.ValueOf(constant.MakeFromLiteral("\"0x09\"", token.STRING, 0)),
		"LinuxShellExt":           reflect.ValueOf(constant.MakeFromLiteral("\".sh\"", token.STRING, 0)),
		"New":                     reflect.ValueOf(transport.New),
		"NewStatus":               reflect.ValueOf(transport.NewStatus),
		"RegisterSessionGauge":    reflect.ValueOf(transport.RegisterSessionGauge),
		"SSHDialTimeout":          reflect.ValueOf(&transport.SSHDialTimeout).Elem(),
		"SSHRWTimeout":            reflect.ValueOf(&transport.SSHRWTimeout).Elem(),
		"WindowsShellExt":         reflect.ValueOf(constant.MakeFromLiteral("\".bat\"", token.STRING, 0)),

		// type definitions
		"CPUInfo":      reflect.ValueOf((*transport.CPUInfo)(nil)),
		"Client":       reflect.ValueOf((*transport.Client)(nil)),
		"ClientConfig": reflect.ValueOf((*transport.ClientConfig)(nil)),
		"FSInfo":       reflect.ValueOf((*transport.FSInfo)(nil)),
		"Gauge":        reflect.ValueOf((*transport.Gauge)(nil)),
		"MachineInfo":  reflect.ValueOf((*transport.MachineInfo)(nil)),
		"NetIntfInfo":  reflect.ValueOf((*transport.NetIntfInfo)(nil)),
		"Session":      reflect.ValueOf((*transport.Session)(nil)),
		"Stats":        reflect.ValueOf((*transport.Stats)(nil)),

		// interface wrapper definitions
		"_Gauge": reflect.ValueOf((*_github_com_ssbeatty_oms_pkg_transport_Gauge)(nil)),
	}
}

// _github_com_ssbeatty_oms_pkg_transport_Gauge is an interface wrapper for Gauge type
type _github_com_ssbeatty_oms_pkg_transport_Gauge struct {
	IValue interface{}
	WDec   func()
	WInc   func()
	WSet   func(a0 float64)
}

func (W _github_com_ssbeatty_oms_pkg_transport_Gauge) Dec() {
	W.WDec()
}
func (W _github_com_ssbeatty_oms_pkg_transport_Gauge) Inc() {
	W.WInc()
}
func (W _github_com_ssbeatty_oms_pkg_transport_Gauge) Set(a0 float64) {
	W.WSet(a0)
}
